{% extends 'template.twig' %}

{% block title %} Accueil {% endblock %}
{% block content %}

  {# if success_connect is defined %}
  <div class="alert alert-success alert-dismissible fade show success_connect" id="alert_connect" role="alert"> 
  {{ success_connect }}
  <button type="button" class="close" data-dismiss="alert" aria-label="Close">
      <span aria-hidden="true">&times;</span>
  </button>
  </div>
  {% endif #}

  <div class="container-fluid container_videos">
  <h1> Nos vidéos </h1>
    <div class="row">
      <div class="col-sm-12 col-lg-2 filtres" id="filtre">
      <div class="form-group">
          <label class="title_form" for="type_video"><i class="fas fa-video"></i>Type de vidéo</label>
          <select class="form-control" id="type_video">
          <option value="1">Toutes</option>
          <option value="2">Gratuites</option>
          <option value="3">Payantes</option>
          </select>
      </div>
      <div class="form-group tri_prix">
          <label class="title_form" for="tri_video"><i class="fas fa-sliders-h"></i>Trier</label>
          <select class="form-control" id="tri_video">
          <option value="1"> Prix croissant </option>
          <option value="2"> Prix décroissant </option>
          </select>
      </div>
      <label class="title_form" for="type_video"><i class="fas fa-search-plus"></i>Thèmes</label>
      {% for t in themes %}
      <div class="form-check">
          <input class="form-check-input themes" type="checkbox" value="{{ t.get_id }}" id="theme_{{ t.get_id }}" checked="checked">
          <label class="form-check-label" for="theme{{ t.get_id }}">
          {{ t.get_nom }}
          </label>
      </div>
      {% endfor %}
      <div class="pub" style="margin-top: 25px;">
        <img src="{{BASEURL}}images/pub.gif" style="width: 100%">
      </div>
      </div>
      <div class=" col-sm-12 col-lg-10 list_videos">
      
      <div class="input-group mb-3 search" id="search">
        <div class="input-group-prepend">
          <button class="btn btn-outline-secondary" type="button" id="button-addon1"><i class="fas fa-search"></i></button>
        </div>
        <input type="text" class="form-control" placeholder="Rechercher une vidéo" name="search" aria-label="Example text with button addon" aria-describedby="button-addon1">
      </div>

  {% for lv in last_video %}

  <div class="lv_container">
    <div class="video"> 
      <div id="player" data-id="{{ video.get_id }}"></div>
    </div>

    <div class="lv_infos">
      <div class="lv_infos_content">
        <h2> A la Une </h2>
        <p class="title"> {{ lv.get_titre }} </p>
        <a role="button" class="btn btn-success" href="{{BASEURL}}video/watch/{{lv.get_id}}"><i class="fas fa-video"></i></a>
      </div>
    </div>
  </div>

  <script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
    player = new YT.Player('player', {
        playerVars: {
            autoplay: 1,
            loop: 1,
            controls: 0,
            showinfo: 0,
            autohide: 1,
            modestbranding: 1,
            vq: 'hd1080',
            start: 15,
            rel: 0,
            playlist: '{{ lv.get_lien }}'
        },
        videoId: '{{ lv.get_lien }}',
        events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange
        }
    });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
    event.target.playVideo();
    player.mute();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
    if (event.data == YT.PlayerState.PLAYING && !done) {
        //setTimeout(stopVideo, 6000);
        done = true;
    }
    }
    function stopVideo() {
    player.stopVideo();
    }
    </script>

  {% endfor %}

      <div class="video-content">
      {% include 'ajax/list_videos.twig' %}
      </div>

      </div>
    </div>
  </div>

  <footer class="container-fluid">
    <div class="row">
      <div class="col-sm-4 f_logo">
        <i class="fas fa-video"></i><strong>D<span class="violet">o</span>ntatune</strong>
      </div>
      <div class="col-sm-4">
        <a href="#"> En savoir plus </a>
        <a href="{{ BASEURL }}home/cgu"> Conditions générales d'utilisation </a>
        <a href="{{ BASEURL }}home/cgv"> Conditions générales de vente </a>
      </div>
    </div>
  </footer>

  <script src="{{BASEURL}}js/video.js"></script>
  <script src="{{BASEURL}}js/board.js"></script>
{% endblock %}
